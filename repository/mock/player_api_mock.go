// Code generated by MockGen. DO NOT EDIT.
// Source: player_api.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	model "l-gomock/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPlayerAPIRepository is a mock of PlayerAPIRepository interface.
type MockPlayerAPIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerAPIRepositoryMockRecorder
}

// MockPlayerAPIRepositoryMockRecorder is the mock recorder for MockPlayerAPIRepository.
type MockPlayerAPIRepositoryMockRecorder struct {
	mock *MockPlayerAPIRepository
}

// NewMockPlayerAPIRepository creates a new mock instance.
func NewMockPlayerAPIRepository(ctrl *gomock.Controller) *MockPlayerAPIRepository {
	mock := &MockPlayerAPIRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerAPIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerAPIRepository) EXPECT() *MockPlayerAPIRepositoryMockRecorder {
	return m.recorder
}

// GetPlayerList mocks base method.
func (m *MockPlayerAPIRepository) GetPlayerList(arg0 context.Context) ([]*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerList", arg0)
	ret0, _ := ret[0].([]*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerList indicates an expected call of GetPlayerList.
func (mr *MockPlayerAPIRepositoryMockRecorder) GetPlayerList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerList", reflect.TypeOf((*MockPlayerAPIRepository)(nil).GetPlayerList), arg0)
}
